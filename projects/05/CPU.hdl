// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //check whether A or C instruction
    Not(in=instruction[15], out=Ainst);
    Not(in=Ainst, out=Cinst);

    //D Register
    And(a=Cinst, b=instruction[4], out=loadD);
    DRegister(in=aluout, load=loadD, out=registerD);

    //A Register
    And(a=Cinst, b=instruction[5], out=aluToA);
    Mux16(a=instruction, b=aluout, sel=aluToA, out=RegAVal);

    Or(a=Ainst, b=aluToA, out=loadA);    
    ARegister(in=RegAVal, load=loadA, out=registerA);

    Mux16(a=registerA, b=inM, sel=instruction[12], out=checkAM);

    ALU(x=registerD, y=checkAM, 
        zx=instruction[11], nx=instruction[10], zy=instruction[9], 
        ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=aluout, zr=zero, ng=neg);

    //writeM
    And(a=Cinst, b=instruction[3], out=writeM);
    //addressM
    Or16(a=false, b=registerA, out[0..14]=addressM);
    //outM
    Or16(a=false, b=aluout, out=outM);

    //jump condition

    //zero
    And(a=zero, b=instruction[1], out=jeq);
    //negative
    And(a=neg, b=instruction[2], out=jlt);
    //positive
    Or(a=zero, b=neg, out=zrOrNeg);
    Not(in=zrOrNeg, out=pos);
    And(a=pos, b=instruction[0], out=jgt);

    //c-instruction && jump condition -> PC load
    Or(a=jeq, b=jlt, out=jout0);
    Or(a=jout0, b=jgt, out=jump);
    And(a=Cinst, b=jump, out=jumpLoad);
    // not PC load -> inc load
    Not(in=jumpLoad, out=incLoad);
    //Program Counter
    PC(in=registerA, load=jumpLoad, inc=incLoad, reset=reset, out[0..14]=pc);
}